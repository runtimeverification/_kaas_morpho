---
######################
# THIS IS AN EXAMPLE #
######################
# This workflow is to be copied to a client repository or used an example for how to call the compute API and run tests. 
#   This is not to be used in the _kaas repository to run proofs. That is done by example-kaas-setup.yml.
#   Intended as a CI example targeting a user/client using GH workflows. 
######################
# Note: Important distinction between github context
#   ${{ github.sha }} in a pull request versus using ${{ github.evnt.pull_request.head.sh }}
#   TLDR:
#   The ${{ github.sha }} context in GitHub Actions provides the SHA of the commit that triggered the workflow. However, if your workflow is triggered by a pull request event, ${{ github.sha }} will be the SHA of the merge commit that GitHub creates for the PR, not the SHA of the latest commit in the PR branch. This is why you're seeing a different SHA when you run git log.
  
#   If you want the SHA of the latest commit in the PR branch, you can use ${{ github.event.pull_request.head.sha }} instead. 
#     This will give you the SHA of the latest commit in the PR branch, which should match what you see when you run git log.
#  OR use a simple bash script
#  


######################

name: "Test Proofs"
on:
  pull_request:
    branches:
      - main
jobs:
  test:
    runs-on: [self-hosted, linux, flyweight]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Run Proofs in KaaS
        run: |
          sha=$(git rev-parse HEAD)
          branch_name=$(git rev-parse --abbrev-ref HEAD)
          response=$(curl -X POST \
            -w "%{http_code}" \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.JENKINS_GITHUB_PAT }}" \
            https://api.github.com/repos/runtimeverification/_kaas< repo name >/actions/workflows/< client >-ci.yml/dispatches \
            -d '{
              "ref": "master",
              "inputs": {
                "branch_name": "'"${{ github.event.pull_request.head.sha }}"'",
                "extra_args": "script",
                "statuses_sha": "'$sha'",
                "org": "runtimeverification",
                "repository": "_audits_< repo name >",
                "auth_token": "'"${{ secrets.JENKINS_GITHUB_PAT }}"'"
              }
            }')
          
            if [ "$response" -ge 200 ] && [ "$response" -lt 300 ]; then
              echo "The request was successful"
            elif [ "$response" -ge 400 ] && [ "$response" -lt 500 ]; then
              echo "There was a client error: $response"
              exit 1
            else
              echo "There was a server error: $response"
              exit 1
            fi
            
