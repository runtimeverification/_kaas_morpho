---
######################
# EXAMPLE WORKFLOW
######################
# This workflow demonstrates how to call the compute API and run tests.
# It is intended for client repositories using GitHub Actions.
# Note: Do not use this in the _kaas repository; use example-kaas-setup.yml instead.
######################
# Important:
# - ${{ github.sha }} in a pull request refers to the merge commit SHA.
# - Use ${{ github.event.pull_request.head.sha }} for the latest commit SHA in the PR branch.
######################

name: "Test Proofs"
on:
  workflow_dispatch:
    inputs: 
      branch_name:
        type: string
        required: true
        description: "The branch name to run the tests on"
      org
  pull_request:
    branches:
      - main
jobs:
  test:
    runs-on: [self-hosted, linux, flyweight] # If  client uses github Public repositories this needs to be [ubuntu-latest]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Run Proofs in KaaS
        run: |
          sha=$(git rev-parse HEAD)
          branch_name=$(git rev-parse --abbrev-ref HEAD)
          response=$(curl -X POST \
            -w "%{http_code}" \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.JENKINS_GITHUB_PAT }}" \
            https://api.github.com/repos/runtimeverification/_kaas_morpho/actions/workflows/proof-ci.yml/dispatches \
            -d '{
              "ref": "master",
              "inputs": {
                "branch_name": "'"${{ github.event.pull_request.head.sha }}"'",
                "extra_args": "script",
                "statuses_sha": "'$sha'",
                "org": "${{ github.event.inputs.org || 'runtimeverification' }}",
                "repository": "${{ github.event.inputs.repository || '_kaas_morpho' }}",
                "auth_token": "'"${{ secrets.JENKINS_GITHUB_PAT }}"'"
              }
            }')
          
            if [ "$response" -ge 200 ] && [ "$response" -lt 300 ]; then
              echo "The request was successful"
            elif [ "$response" -ge 400 ] && [ "$response" -lt 500 ]; then
              echo "There was a client error: $response"
              exit 1
            else
              echo "There was a server error: $response"
              exit 1
            fi